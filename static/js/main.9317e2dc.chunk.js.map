{"version":3,"sources":["components/Header/Header.js","components/Search/Search.js","contexts/CurrentMovieContext.js","components/cardDetails/cardDetails.js","components/Card/Card.js","components/CardList/CardList.js","Api/Api.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Search","props","name","onSubmit","e","preventDefault","type","placeholder","minLength","maxLength","value","search","required","onChange","test","target","CurrentMovieContext","React","createContext","CardDetails","isMovieDetails","useContext","Plot","Released","Director","Card","src","movie","Poster","alt","Title","onClick","imdbID","CardList","movies","map","item","api","options","this","_options","res","ok","json","Promise","reject","status","fetch","baseUrl","authorization","then","_answerForServer","id","App","useState","setMovies","setSearch","currentMovie","setCurrentMovie","Provider","getMovies","Response","catch","err","console","log","inputSearch","getMoviesById","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9317e2dc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n    return (\r\n        <h1 className=\"header__title\">OMDB search</h1>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Search(props) {\r\n    \r\n    const handleChangeSearchInput = (e) => {\r\n        if ((/^([a-zA-Z0-9]*)$/.test(e.target.value))) props.onChange(e.target.value);\r\n    };\r\n\r\n    const handleSubmitSearch = (e) => {\r\n        e.preventDefault();\r\n        props.onSubmit();\r\n    }\r\n\r\n    return (\r\n        <div className=\"search\">\r\n            <form name='search-movie' className=\"search-movie\" onSubmit={handleSubmitSearch}>\r\n                <input type=\"text\" \r\n                    className=\"search__input\" \r\n                    name=\"movie\" \r\n                    placeholder=\"Название фильма\" \r\n                    minLength=\"2\" \r\n                    maxLength=\"30\" \r\n                    value={props.search || ''}\r\n                    required \r\n                    onChange={handleChangeSearchInput} />\r\n                <button type=\"submit\" className=\"search__button\">Искать</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nexport const CurrentMovieContext = React.createContext();","import React from 'react';\r\nimport { CurrentMovieContext } from '../../contexts/CurrentMovieContext';\r\n\r\nfunction CardDetails() {\r\n    const isMovieDetails = React.useContext(CurrentMovieContext);\r\n    return (\r\n        <>\r\n            <p className=\"card__info\">{`${isMovieDetails.Plot}`}</p>\r\n            <p className=\"card__info\"><span className=\"card__info_bold\">Премьера: </span>{isMovieDetails.Released}</p>\r\n            <p className=\"card__info\"><span className=\"card__info_bold\">Режиссер: </span>{isMovieDetails.Director}</p>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CardDetails;","import React from 'react';\r\nimport { CurrentMovieContext } from '../../contexts/CurrentMovieContext';\r\nimport CardDetails from '../cardDetails/cardDetails';\r\n\r\nfunction Card(props) {\r\n    const isMovieDetails = React.useContext(CurrentMovieContext);\r\n\r\n    const handleClickDetails = () => {\r\n        if(props.movie.imdbID !== isMovieDetails.imdbID) {\r\n            props.onClick(props.movie.imdbID);\r\n        } else {\r\n            props.onClick(null);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <li className=\"card\">\r\n            <figure className=\"card__image\">\r\n                <img src={props.movie.Poster} alt={props.movie.Title} className=\"card__image-slide\" />\r\n                <figcaption className=\"card__caption\">{props.movie.Title}</figcaption>\r\n            </figure>\r\n            <p className=\"card__more\" onClick={handleClickDetails}>Показать детали</p>\r\n            <div className={`card__details ${props.movie.imdbID === isMovieDetails.imdbID && 'card__details_open'}`}>\r\n                <CardDetails />\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card';\r\n\r\nfunction CardList({movies, onClick}) {\r\n    return (\r\n            <ul className=\"cards\">\r\n                {movies.map(item => <Card movie={item} key={item.imdbID} onClick={onClick} />)}\r\n            </ul>\r\n    );\r\n}\r\n\r\nexport default CardList;","class Api {\r\n    constructor(options) {\r\n        this._options = options;\r\n    }\r\n\r\n    _answerForServer(res) {\r\n        if (res.ok) {\r\n            return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n    }\r\n\r\n    getMovies(movie) {\r\n        return fetch(`${this._options.baseUrl}?s=${movie}&apikey=${this._options.authorization}`)\r\n        .then((res) => this._answerForServer(res));\r\n    }\r\n\r\n    getMoviesById(id) {\r\n        return fetch(`${this._options.baseUrl}?i=${id}&plot=full&apikey=${this._options.authorization}`)\r\n        .then((res) => this._answerForServer(res));\r\n    }\r\n\r\n\r\n}\r\n\r\nconst apiOptions = {\r\n    baseUrl: \"http://www.omdbapi.com/\",\r\n    authorization: \"f2ead94d\",\r\n};\r\n\r\nconst api = new Api(apiOptions);\r\n\r\nexport default api;\r\n ","import Header from \"./components/Header/Header\";\nimport Search from './components/Search/Search';\nimport CardList from \"./components/CardList/CardList\";\nimport api from \"./Api/Api\";\nimport React from \"react\";\nimport { CurrentMovieContext } from \"./contexts/CurrentMovieContext\";\n\nfunction App() {\n  const [movies, setMovies] = React.useState([]);\n  const [search, setSearch] = React.useState(null);\n  const [currentMovie, setCurrentMovie] = React.useState({});\n  \n  const handleSubmitSearch = () => {\n    api.getMovies(search)\n    .then(res => {\n        if(res.Response === 'True') {\n          setMovies(res.Search);\n        } else {\n          setMovies([])\n        }\n        setSearch(null);\n    }).catch(err => console.log(err));\n  }\n\n  const handleChangeSearchInput = (inputSearch) => {\n    setSearch(inputSearch);\n  }\n\n  const handleClickDetails = (id) => {\n    api.getMoviesById(id)\n    .then(res => {\n      setCurrentMovie(res);\n    }).catch(err => console.log(err));\n  }\n\n  return (\n    <>\n    <CurrentMovieContext.Provider value={currentMovie}>\n        <Header />\n        <Search onSubmit={handleSubmitSearch} search={search} onChange={handleChangeSearchInput} />\n        <CardList movies={movies} onClick={handleClickDetails} />\n    </CurrentMovieContext.Provider>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}